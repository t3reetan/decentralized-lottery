{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__InsufficientEntranceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "contractBal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "RecentWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerIndex",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa643763905f42664ec743fb9b52ca91f1ea25e699cb1decddb7132511eae6dd8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1222762",
    "logsBloom": "0x
    "blockHash": "0x879126dd9dd0ddba23f59a02d535611773d39d2d02b4449dd0114f1a13bccdaa",
    "transactionHash": "0xa643763905f42664ec743fb9b52ca91f1ea25e699cb1decddb7132511eae6dd8",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1222762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "10000000000000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "e705e5ff7f6d966a2caa22b0f859f8e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__InsufficientEntranceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contractBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RecentWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Terry Tan\",\"details\":\"This contract implements Chainlink VRF and Chainlink keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink keeper nodes call when they look for the `upkeepNeeded` to return true. The following conditions have to be true in order to return an upkeepNeeded of value true 1. Time interval should have passed 2. Lottery should have at least 1 player, and have some ETH 3. Subscription ??? is funded with LINK 4. Lottery should be in an \\\"open\\\" state, meaning that when we're picking a winner, the lottery is \\\"calculating\\\", \\\"closed\\\", etc\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"title\":\"A sample Raffle contract\",\"version\":1},\"userdoc\":{\"events\":{\"RaffleEnter(address)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions \"},\"getEntranceFee()\":{\"notice\":\"View/Pure functions \"}},\"notice\":\"This contract creates an untemperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Enter the lottery -> need to pay an amount\\n// Pick a random winner -> need to be verifiably random -> use Chainlink VRF\\n// Winner must be selected automatically every X minutes -> process to be completely automated -> use Chainlink keepers\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__InsufficientEntranceFee();\\nerror Raffle_TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 contractBal, uint256 numPlayers, uint256 raffleState);\\n\\n/** @title A sample Raffle contract\\n *  @author Terry Tan\\n *  @notice This contract creates an untemperable decentralized smart contract\\n *  @dev This contract implements Chainlink VRF and Chainlink keepers\\n *\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /** Type declarations */\\n    // uint256: 0 = OPEN, 1 = CALCULATING\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    uint256 private immutable i_entranceFee;\\n\\n    /** State variables */\\n    // will have to make the address array payable since when one of the players win, we'll have to pay them\\n    // notice how the syntax is a little weird, but that's just how it is\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /** Lottery variables */\\n    address payable[] private s_players;\\n    address payable s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /** Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event RecentWinner(address indexed winner);\\n\\n    /** Functions */\\n    // VRFConsumerBaseV2 is the constructor for the VRF contract\\n    // the vrfCoordinator is the address of the contract that does the random number verification\\n    constructor(\\n        address vrfCoordinatorV2, // VRF contract\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__InsufficientEntranceFee();\\n        }\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender)); // msg.sender is not a payable address, requires type-casting\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink keeper nodes call when they\\n     * look for the `upkeepNeeded` to return true.\\n     * The following conditions have to be true in order to return an upkeepNeeded of value true\\n     * 1. Time interval should have passed\\n     * 2. Lottery should have at least 1 player, and have some ETH\\n     * 3. Subscription ??? is funded with LINK\\n     * 4. Lottery should be in an \\\"open\\\" state, meaning that when we're picking a winner,\\n     * the lottery is \\\"calculating\\\", \\\"closed\\\", etc\\n     */\\n    // having the parameter be of bytes datatype allows us to use any kind of arguments (even another function) when calling this function\\n    // performData is what we use if we want checkUpKeep to do some other stuff\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool intervalPassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = (s_players.length) > 0;\\n        bool hasBalance = address(this).balance > 0;\\n\\n        upkeepNeeded = (isOpen && intervalPassed && hasPlayers && hasBalance);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            ); // add some arguments here to give the person running into the error some info\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        // Takes specified parameters and submits the request to the VRF coordinator contract\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit, // sets a limit for how much computation our fulfillRandomWords() can perform\\n            NUM_WORDS\\n        );\\n\\n        // this is actually redundant coz VRF Coordinator itself emits an event called RandomWordsRequested\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    // Receives random values and stores them with your contract.\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle_TransferFailed();\\n        }\\n\\n        // we wanna emit an event so that there is always an easily query-able log of winners' addresses\\n        emit RecentWinner(recentWinner);\\n    }\\n\\n    /** View/Pure functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 playerIndex) public view returns (address) {\\n        return s_players[playerIndex];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x6d1bb7d25dd13ba8748a2d41f24132daf722eab0a85592dbdc264b3c2e2f1a4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200185d3803806200185d833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508160a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460e081815250508367ffffffffffffffff166101008167ffffffffffffffff16815250508263ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b600067ffffffffffffffff82169050919050565b620001f281620001d3565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b600063ffffffff82169050919050565b620002338162000218565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b6000819050919050565b6200026e8162000259565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a0162000242565b93505060806200031089828a016200027d565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161148e620003cf60003960008181610691015261073a0152600061053401526000610511015260006104f0015260006104b4015260008181610302015261076001526000818161033f0152610393015261148e6000f3fe6080604052600436106100c65760003560e01c806355c9e9261161007f57806391ad27b41161005957806391ad27b414610261578063c1af57851461028c578063c1c244e814610296578063e55ae4e8146102c1576100cd565b806355c9e926146101cd5780635f1b0fd8146101f85780636e04ff0d14610223576100cd565b806309bc33a7146100cf578063115cbaf5146100fa5780631fe543e3146101255780634585e33b1461014e578063473f1ddc1461017757806353a2c19a146101a2576100cd565b366100cd57005b005b3480156100db57600080fd5b506100e46102fe565b6040516100f19190610c0f565b60405180910390f35b34801561010657600080fd5b5061010f610326565b60405161011c9190610ca1565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610e55565b61033d565b005b34801561015a57600080fd5b5061017560048036038101906101709190610f0c565b6103fd565b005b34801561018357600080fd5b5061018c6105fc565b6040516101999190610f9a565b60405180910390f35b3480156101ae57600080fd5b506101b7610626565b6040516101c49190610c0f565b60405180910390f35b3480156101d957600080fd5b506101e2610635565b6040516101ef9190610c0f565b60405180910390f35b34801561020457600080fd5b5061020d610641565b60405161021a9190610c0f565b60405180910390f35b34801561022f57600080fd5b5061024a6004803603810190610245919061106a565b61064e565b604051610258929190611156565b60405180910390f35b34801561026d57600080fd5b50610276610736565b6040516102839190610c0f565b60405180910390f35b61029461075e565b005b3480156102a257600080fd5b506102ab6108cd565b6040516102b89190610c0f565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e39190611186565b6108d7565b6040516102f59190610f9a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ef57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e69291906111b3565b60405180910390fd5b6103f9828261091e565b5050565b60006104176040518060200160405280600081525061064e565b509050806104865747600080549050600160149054906101000a900460ff16600181111561044857610447610c2a565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161047d939291906111dc565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104ab576104aa610c2a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161057595949392919061128b565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c791906112f3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561067657610675610c2a565b5b6000600181111561068a57610689610c2a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106be919061134f565b119050600080600080549050119050600080471190508380156106de5750825b80156106e75750815b80156106f05750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107b8576040517fc93d651600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107cc576107cb610c2a565b5b600160149054906101000a900460ff1660018111156107ee576107ed610c2a565b5b14610825576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60008082815481106108ec576108eb611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080805490508260008151811061093957610938611383565b5b602002602001015161094b91906113e1565b9050600080828154811061096257610961611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109f6576109f5610c2a565b5b0217905550600067ffffffffffffffff811115610a1657610a15610d12565b5b604051908082528060200260200182016040528015610a445781602001602082028036833780820191505090505b5060009080519060200190610a5a929190610b4f565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8890611443565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b5050905080610b05576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f71945ad93dd7daff7e0de5e333eff60625118c1eddc0ebb3931a656d1c05e06f60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc8579160200282015b82811115610bc75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b6f565b5b509050610bd59190610bd9565b5090565b5b80821115610bf2576000816000905550600101610bda565b5090565b6000819050919050565b610c0981610bf6565b82525050565b6000602082019050610c246000830184610c00565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6a57610c69610c2a565b5b50565b6000819050610c7b82610c59565b919050565b6000610c8b82610c6d565b9050919050565b610c9b81610c80565b82525050565b6000602082019050610cb66000830184610c92565b92915050565b6000604051905090565b600080fd5b600080fd5b610cd981610bf6565b8114610ce457600080fd5b50565b600081359050610cf681610cd0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4a82610d01565b810181811067ffffffffffffffff82111715610d6957610d68610d12565b5b80604052505050565b6000610d7c610cbc565b9050610d888282610d41565b919050565b600067ffffffffffffffff821115610da857610da7610d12565b5b602082029050602081019050919050565b600080fd5b6000610dd1610dcc84610d8d565b610d72565b90508083825260208201905060208402830185811115610df457610df3610db9565b5b835b81811015610e1d5780610e098882610ce7565b845260208401935050602081019050610df6565b5050509392505050565b600082601f830112610e3c57610e3b610cfc565b5b8135610e4c848260208601610dbe565b91505092915050565b60008060408385031215610e6c57610e6b610cc6565b5b6000610e7a85828601610ce7565b925050602083013567ffffffffffffffff811115610e9b57610e9a610ccb565b5b610ea785828601610e27565b9150509250929050565b600080fd5b60008083601f840112610ecc57610ecb610cfc565b5b8235905067ffffffffffffffff811115610ee957610ee8610eb1565b5b602083019150836001820283011115610f0557610f04610db9565b5b9250929050565b60008060208385031215610f2357610f22610cc6565b5b600083013567ffffffffffffffff811115610f4157610f40610ccb565b5b610f4d85828601610eb6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8482610f59565b9050919050565b610f9481610f79565b82525050565b6000602082019050610faf6000830184610f8b565b92915050565b600080fd5b600067ffffffffffffffff821115610fd557610fd4610d12565b5b610fde82610d01565b9050602081019050919050565b82818337600083830152505050565b600061100d61100884610fba565b610d72565b90508281526020810184848401111561102957611028610fb5565b5b611034848285610feb565b509392505050565b600082601f83011261105157611050610cfc565b5b8135611061848260208601610ffa565b91505092915050565b6000602082840312156110805761107f610cc6565b5b600082013567ffffffffffffffff81111561109e5761109d610ccb565b5b6110aa8482850161103c565b91505092915050565b60008115159050919050565b6110c8816110b3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111085780820151818401526020810190506110ed565b83811115611117576000848401525b50505050565b6000611128826110ce565b61113281856110d9565b93506111428185602086016110ea565b61114b81610d01565b840191505092915050565b600060408201905061116b60008301856110bf565b818103602083015261117d818461111d565b90509392505050565b60006020828403121561119c5761119b610cc6565b5b60006111aa84828501610ce7565b91505092915050565b60006040820190506111c86000830185610f8b565b6111d56020830184610f8b565b9392505050565b60006060820190506111f16000830186610c00565b6111fe6020830185610c00565b61120b6040830184610c00565b949350505050565b6000819050919050565b61122681611213565b82525050565b600067ffffffffffffffff82169050919050565b6112498161122c565b82525050565b600061ffff82169050919050565b6112668161124f565b82525050565b600063ffffffff82169050919050565b6112858161126c565b82525050565b600060a0820190506112a0600083018861121d565b6112ad6020830187611240565b6112ba604083018661125d565b6112c7606083018561127c565b6112d4608083018461127c565b9695505050505050565b6000815190506112ed81610cd0565b92915050565b60006020828403121561130957611308610cc6565b5b6000611317848285016112de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135a82610bf6565b915061136583610bf6565b92508282101561137857611377611320565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ec82610bf6565b91506113f783610bf6565b925082611407576114066113b2565b5b828206905092915050565b600081905092915050565b50565b600061142d600083611412565b91506114388261141d565b600082019050919050565b600061144e82611420565b915081905091905056fea2646970667358221220be5c8ec916a6e46e259df376d751c57ba4d65a7bbacf64c973442562434ed78764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c806355c9e9261161007f57806391ad27b41161005957806391ad27b414610261578063c1af57851461028c578063c1c244e814610296578063e55ae4e8146102c1576100cd565b806355c9e926146101cd5780635f1b0fd8146101f85780636e04ff0d14610223576100cd565b806309bc33a7146100cf578063115cbaf5146100fa5780631fe543e3146101255780634585e33b1461014e578063473f1ddc1461017757806353a2c19a146101a2576100cd565b366100cd57005b005b3480156100db57600080fd5b506100e46102fe565b6040516100f19190610c0f565b60405180910390f35b34801561010657600080fd5b5061010f610326565b60405161011c9190610ca1565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610e55565b61033d565b005b34801561015a57600080fd5b5061017560048036038101906101709190610f0c565b6103fd565b005b34801561018357600080fd5b5061018c6105fc565b6040516101999190610f9a565b60405180910390f35b3480156101ae57600080fd5b506101b7610626565b6040516101c49190610c0f565b60405180910390f35b3480156101d957600080fd5b506101e2610635565b6040516101ef9190610c0f565b60405180910390f35b34801561020457600080fd5b5061020d610641565b60405161021a9190610c0f565b60405180910390f35b34801561022f57600080fd5b5061024a6004803603810190610245919061106a565b61064e565b604051610258929190611156565b60405180910390f35b34801561026d57600080fd5b50610276610736565b6040516102839190610c0f565b60405180910390f35b61029461075e565b005b3480156102a257600080fd5b506102ab6108cd565b6040516102b89190610c0f565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e39190611186565b6108d7565b6040516102f59190610f9a565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ef57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e69291906111b3565b60405180910390fd5b6103f9828261091e565b5050565b60006104176040518060200160405280600081525061064e565b509050806104865747600080549050600160149054906101000a900460ff16600181111561044857610447610c2a565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161047d939291906111dc565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104ab576104aa610c2a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161057595949392919061128b565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c791906112f3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561067657610675610c2a565b5b6000600181111561068a57610689610c2a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106be919061134f565b119050600080600080549050119050600080471190508380156106de5750825b80156106e75750815b80156106f05750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107b8576040517fc93d651600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107cc576107cb610c2a565b5b600160149054906101000a900460ff1660018111156107ee576107ed610c2a565b5b14610825576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60008082815481106108ec576108eb611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080805490508260008151811061093957610938611383565b5b602002602001015161094b91906113e1565b9050600080828154811061096257610961611383565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109f6576109f5610c2a565b5b0217905550600067ffffffffffffffff811115610a1657610a15610d12565b5b604051908082528060200260200182016040528015610a445781602001602082028036833780820191505090505b5060009080519060200190610a5a929190610b4f565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8890611443565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b5050905080610b05576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f71945ad93dd7daff7e0de5e333eff60625118c1eddc0ebb3931a656d1c05e06f60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc8579160200282015b82811115610bc75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b6f565b5b509050610bd59190610bd9565b5090565b5b80821115610bf2576000816000905550600101610bda565b5090565b6000819050919050565b610c0981610bf6565b82525050565b6000602082019050610c246000830184610c00565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c6a57610c69610c2a565b5b50565b6000819050610c7b82610c59565b919050565b6000610c8b82610c6d565b9050919050565b610c9b81610c80565b82525050565b6000602082019050610cb66000830184610c92565b92915050565b6000604051905090565b600080fd5b600080fd5b610cd981610bf6565b8114610ce457600080fd5b50565b600081359050610cf681610cd0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d4a82610d01565b810181811067ffffffffffffffff82111715610d6957610d68610d12565b5b80604052505050565b6000610d7c610cbc565b9050610d888282610d41565b919050565b600067ffffffffffffffff821115610da857610da7610d12565b5b602082029050602081019050919050565b600080fd5b6000610dd1610dcc84610d8d565b610d72565b90508083825260208201905060208402830185811115610df457610df3610db9565b5b835b81811015610e1d5780610e098882610ce7565b845260208401935050602081019050610df6565b5050509392505050565b600082601f830112610e3c57610e3b610cfc565b5b8135610e4c848260208601610dbe565b91505092915050565b60008060408385031215610e6c57610e6b610cc6565b5b6000610e7a85828601610ce7565b925050602083013567ffffffffffffffff811115610e9b57610e9a610ccb565b5b610ea785828601610e27565b9150509250929050565b600080fd5b60008083601f840112610ecc57610ecb610cfc565b5b8235905067ffffffffffffffff811115610ee957610ee8610eb1565b5b602083019150836001820283011115610f0557610f04610db9565b5b9250929050565b60008060208385031215610f2357610f22610cc6565b5b600083013567ffffffffffffffff811115610f4157610f40610ccb565b5b610f4d85828601610eb6565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8482610f59565b9050919050565b610f9481610f79565b82525050565b6000602082019050610faf6000830184610f8b565b92915050565b600080fd5b600067ffffffffffffffff821115610fd557610fd4610d12565b5b610fde82610d01565b9050602081019050919050565b82818337600083830152505050565b600061100d61100884610fba565b610d72565b90508281526020810184848401111561102957611028610fb5565b5b611034848285610feb565b509392505050565b600082601f83011261105157611050610cfc565b5b8135611061848260208601610ffa565b91505092915050565b6000602082840312156110805761107f610cc6565b5b600082013567ffffffffffffffff81111561109e5761109d610ccb565b5b6110aa8482850161103c565b91505092915050565b60008115159050919050565b6110c8816110b3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111085780820151818401526020810190506110ed565b83811115611117576000848401525b50505050565b6000611128826110ce565b61113281856110d9565b93506111428185602086016110ea565b61114b81610d01565b840191505092915050565b600060408201905061116b60008301856110bf565b818103602083015261117d818461111d565b90509392505050565b60006020828403121561119c5761119b610cc6565b5b60006111aa84828501610ce7565b91505092915050565b60006040820190506111c86000830185610f8b565b6111d56020830184610f8b565b9392505050565b60006060820190506111f16000830186610c00565b6111fe6020830185610c00565b61120b6040830184610c00565b949350505050565b6000819050919050565b61122681611213565b82525050565b600067ffffffffffffffff82169050919050565b6112498161122c565b82525050565b600061ffff82169050919050565b6112668161124f565b82525050565b600063ffffffff82169050919050565b6112858161126c565b82525050565b600060a0820190506112a0600083018861121d565b6112ad6020830187611240565b6112ba604083018661125d565b6112c7606083018561127c565b6112d4608083018461127c565b9695505050505050565b6000815190506112ed81610cd0565b92915050565b60006020828403121561130957611308610cc6565b5b6000611317848285016112de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135a82610bf6565b915061136583610bf6565b92508282101561137857611377611320565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ec82610bf6565b91506113f783610bf6565b925082611407576114066113b2565b5b828206905092915050565b600081905092915050565b50565b600061142d600083611412565b91506114388261141d565b600082019050919050565b600061144e82611420565b915081905091905056fea2646970667358221220be5c8ec916a6e46e259df376d751c57ba4d65a7bbacf64c973442562434ed78764736f6c63430008090033",
  "devdoc": {
    "author": "Terry Tan",
    "details": "This contract implements Chainlink VRF and Chainlink keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink keeper nodes call when they look for the `upkeepNeeded` to return true. The following conditions have to be true in order to return an upkeepNeeded of value true 1. Time interval should have passed 2. Lottery should have at least 1 player, and have some ETH 3. Subscription ??? is funded with LINK 4. Lottery should be in an \"open\" state, meaning that when we're picking a winner, the lottery is \"calculating\", \"closed\", etc"
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "title": "A sample Raffle contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RaffleEnter(address)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions "
      },
      "getEntranceFee()": {
        "notice": "View/Pure functions "
      }
    },
    "notice": "This contract creates an untemperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 221,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)199"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)199": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}